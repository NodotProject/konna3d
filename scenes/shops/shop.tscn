[gd_scene load_steps=5 format=3 uid="uid://wq4tiiy13x40"]

[ext_resource type="StyleBox" uid="uid://dpjqq6wg61exn" path="res://scenes/shops/wood_style.tres" id="1_t4c2w"]
[ext_resource type="PackedScene" uid="uid://i4nwbmiitk47" path="res://scenes/shops/required_item.tscn" id="2_12p2y"]
[ext_resource type="PackedScene" uid="uid://bixcpscscepc0" path="res://scenes/shops/trade_item.tscn" id="3_g267e"]

[sub_resource type="GDScript" id="GDScript_85u6x"]
resource_name = "shop"
script/source = "extends VBoxContainer

@export var trades: Array[Dictionary] = [] # Array[Dictionary[name: string, quantity: int, trades: Dictionary[quantity: int]]
@export var selling: bool = false

@export_subgroup(\"Input Actions\")
@export var escape_action := \"escape\"
@export var up_action := \"up\"
@export var down_action := \"down\"
@export var select_action := \"interact\"

@onready var required_item_container = $OwnedPanel/RequiredItems
@onready var trade_item_container = $TradePanel/TradeItems

signal shop_opened
signal shop_closed
signal trade_made

var required_item_node = preload(\"res://scenes/shops/required_item.tscn\")
var trade_item_node = preload(\"res://scenes/shops/trade_item.tscn\")

var player_state: StateMachine
var interaction3d: Interaction3D
var inventory: CollectableInventory
var in_menu_state_id: int
var idle_state_id: int
var currently_selected := 1
var available_trades = []

func _ready():
	$OwnedPanel/CloseButton.connect(\"button_up\", close)
	
func _input(event: InputEvent):
	if visible:
		if event.is_action_pressed(escape_action):
			close()
		if event.is_action_pressed(up_action):
			select_previous_menu_item()
		if event.is_action_pressed(down_action):
			select_next_menu_item()
		if event.is_action_pressed(select_action):
			perform_trade()

func open():
	if !player_state:
		setup_player()
	
	interaction3d.enabled = false
	player_state.set_state(in_menu_state_id)
	
	update_shop()
		
	visible = true
	emit_signal(\"shop_opened\")

func close():
	currently_selected = 1
	update_highlighter()
	visible = false
	emit_signal(\"shop_closed\")
	player_state.set_state(idle_state_id)
	await get_tree().physics_frame
	interaction3d.enabled = true
	
func update_shop():
	Nodot.free_all_children(required_item_container)
	Nodot.free_all_children(trade_item_container)
	
	inventory = Nodot.get_first_child_of_type(PlayerManager.node, CollectableInventory)
	var required_items: Array[String] = []
	available_trades = []
	
	for receive_item in trades:
		if \"hide_on_owned\" in receive_item:
			if inventory.get_collectable_count(receive_item.name) > 0:
				continue
		
		available_trades.append(receive_item)
		var new_trade_item_node = trade_item_node.instantiate()
		new_trade_item_node.setup(receive_item.name, str(receive_item.quantity), receive_item.trades)
		trade_item_container.add_child(new_trade_item_node)
		
		if !selling:
			for trade_item_name in receive_item.trades:
				if !required_items.has(trade_item_name):
					required_items.append(trade_item_name)
					
		if can_afford_trade(receive_item):
			new_trade_item_node.modulate = Color(1.0, 1.0, 1.0, 1.0)
		else:
			new_trade_item_node.modulate = Color(1.0, 1.0, 1.0, 0.5)
					
	for required_item in required_items:
		var new_required_item_node = required_item_node.instantiate()
		var item_info = CollectableManager.get_info(required_item)
		var quantity = inventory.get_collectable_count(required_item)
		new_required_item_node.setup(item_info.icon, str(quantity))
		required_item_container.add_child(new_required_item_node)

func setup_player():
	player_state = PlayerManager.node.sm
	interaction3d = PlayerManager.node.get_node(\"Interaction3D\")
	inventory = Nodot.get_first_child_of_type(PlayerManager.node, CollectableInventory)
	in_menu_state_id = player_state.register_state(\"in_menu\")
	idle_state_id = player_state.get_id_from_name(\"idle\")
	player_state.add_valid_transition(\"in_menu\", \"idle\")
	player_state.add_valid_transition(\"idle\", \"in_menu\")
	player_state.add_valid_transition(\"walk\", \"in_menu\")

func select_previous_menu_item():
	if currently_selected > 0:
		currently_selected -= 1
		update_highlighter()
	
func select_next_menu_item():
	if currently_selected < available_trades.size():
		currently_selected += 1
		update_highlighter()
	
func perform_trade():
	if currently_selected == 0:
		close()
		return
		
	var selected_index = currently_selected - 1
	var trade = available_trades[selected_index]
	
	if !can_afford_trade(trade):
		return
	
	for item_name in trade.trades:
		var quantity = trade.trades[item_name]
		inventory.remove(item_name, quantity)
		
	inventory.add(trade.name, trade.quantity)
	update_shop()
	currently_selected = 1
		
func can_afford_trade(trade: Dictionary):
	var can_afford = true
	for item in trade.trades:
		if inventory.get_collectable_count(item) < trade.trades[item]:
			can_afford = false
	return can_afford

func update_highlighter():
	if currently_selected == 0:
		%CloseButton.add_theme_color_override(\"font_color\", Color.WHITE)
		%Highlighter.visible = false
	else:
		%CloseButton.add_theme_color_override(\"font_color\", Color.RED)
		var selected_index = currently_selected - 1
		%Highlighter.visible = true
		var highlighted_item: BoxContainer = %TradeItems.get_child(selected_index)
		%Highlighter.position.y = highlighted_item.position.y
"

[node name="Shop" type="VBoxContainer"]
offset_left = 64.0
offset_top = 24.0
offset_right = 1088.0
offset_bottom = 624.0
script = SubResource("GDScript_85u6x")
trades = Array[Dictionary]([{
"name": null,
"quantity": null,
"trades": {}
}])

[node name="OwnedPanel" type="HBoxContainer" parent="."]
layout_mode = 2
theme_override_constants/separation = 50

[node name="CloseButton" type="Button" parent="OwnedPanel"]
unique_name_in_owner = true
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
theme_override_colors/font_color = Color(1, 0, 0, 1)
theme_override_font_sizes/font_size = 40
theme_override_styles/normal = ExtResource("1_t4c2w")
text = "X"
expand_icon = true

[node name="RequiredItems" type="HBoxContainer" parent="OwnedPanel"]
layout_mode = 2
theme_override_constants/separation = 20

[node name="RequiredItem" parent="OwnedPanel/RequiredItems" instance=ExtResource("2_12p2y")]
layout_mode = 2

[node name="TradePanel" type="Panel" parent="."]
layout_mode = 2
size_flags_vertical = 3
theme_override_styles/panel = ExtResource("1_t4c2w")

[node name="Highlighter" type="ColorRect" parent="TradePanel"]
unique_name_in_owner = true
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = 5.0
offset_top = 5.0
offset_right = -5.0
offset_bottom = -430.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0, 0, 0, 0.145098)

[node name="TradeItems" type="VBoxContainer" parent="TradePanel"]
unique_name_in_owner = true
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_bottom = -0.119995
grow_horizontal = 2
grow_vertical = 2
size_flags_vertical = 3
theme_override_constants/separation = 0

[node name="TradeItem" parent="TradePanel/TradeItems" instance=ExtResource("3_g267e")]
layout_mode = 2
